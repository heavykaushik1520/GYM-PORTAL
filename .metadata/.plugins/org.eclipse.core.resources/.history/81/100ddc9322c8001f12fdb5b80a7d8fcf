package com.project.bl.services;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.server.ResponseStatusException;

import com.project.bl.model.Member;
import com.project.bl.model.Trainer;
import com.project.bl.repository.MemberRepository;
import com.project.bl.repository.TrainerRepository;
import com.project.bl.responsewrapper.ResponseWrapper;

@Service
public class TrainerService {

	@Autowired
	private TrainerRepository trainerRepository;

	@Autowired
	private ResponseWrapper responseWrapper;

	@Autowired
	private MemberRepository memberRepository;

	public ResponseEntity<?> createTrainer(Trainer trainer) {
		Trainer savedTrainer = trainerRepository.save(trainer);
		responseWrapper.setMessage("Trainer Created Successfully");
		responseWrapper.setData(savedTrainer);
		return new ResponseEntity<>(responseWrapper, HttpStatus.OK);
	}

	// Get All Trainers
	public ResponseEntity<?> getAllTrainers() {
		List<Trainer> allTrainers = trainerRepository.findAll();
		responseWrapper.setMessage("Following are the trainers:");
		responseWrapper.setData(allTrainers);
		return new ResponseEntity<>(responseWrapper, HttpStatus.OK);
	}

	public ResponseEntity<?> getTrainerById(Integer id) {
		Trainer trainerFound = trainerRepository.findById(id).orElseThrow(() -> {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No trainer found with id " + id);
		});
		responseWrapper.setMessage("Trainer Found");
		responseWrapper.setData(trainerFound);
		return new ResponseEntity<>(responseWrapper, HttpStatus.OK);
	}

	public ResponseEntity<?> updateTrainerById(Integer id, Trainer updatedTrainer) {
		Trainer trainerFound = trainerRepository.findById(id).orElseThrow(() -> {
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No trainer found with id " + id);
		});

		trainerFound.setName(updatedTrainer.getName());
		trainerFound.setPhoneNumber(updatedTrainer.getPhoneNumber());

		Trainer trainer = trainerRepository.save(trainerFound);
		responseWrapper.setMessage("Trainer Updated Successfully");
		responseWrapper.setData(trainer);
		return new ResponseEntity<>(responseWrapper, HttpStatus.OK);
	}

//	public ResponseEntity<?> deleteTrainerById(Integer id) {
//		Trainer trainerFound = trainerRepository.findById(id).orElseThrow(() -> {
//			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No trainer found with id " + id);
//		});
//
//		trainerRepository.delete(trainerFound);
//		responseWrapper.setMessage("Trainer Deleted Successfully");
//		responseWrapper.setData(null);
//		return new ResponseEntity<>(responseWrapper, HttpStatus.OK);
//	}

	@Transactional
	public ResponseEntity<?> deleteTrainerById(Integer id, Integer newTrainerId) {

		Trainer trainerToDelete = trainerRepository.findById(id)
				.orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "No trainer found with id " + id));

		Trainer newTrainer = trainerRepository.findById(newTrainerId).orElseThrow(
				() -> new ResponseStatusException(HttpStatus.NOT_FOUND, "No trainer found with id " + newTrainerId));

		List<Member> membersToReassign = memberRepository.findAllByTrainer(trainerToDelete);
		for (Member member : membersToReassign) {
			member.setTrainer(newTrainer);
		}
		memberRepository.saveAll(membersToReassign);

		trainerRepository.delete(trainerToDelete);

		responseWrapper
				.setMessage("Trainer deleted successfully, and members reassigned to trainer with id " + newTrainerId);
		responseWrapper.setData(null);
		return new ResponseEntity<>(responseWrapper, HttpStatus.OK);
	}

}
